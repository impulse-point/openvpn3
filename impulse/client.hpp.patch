--- a/openvpn/tun/builder/client.hpp
+++ b/openvpn/tun/builder/client.hpp
@@ -51,9 +51,9 @@ namespace openvpn {
     // A simplified tun interface where pre-existing
     // socket is provided.
     template <typename ReadHandler>
-    class Tun : public TunIO<ReadHandler, PacketFrom, openvpn_io::posix::stream_descriptor>
+    class Tun : public TunIO<ReadHandler, PacketFrom, openvpn_io::windows::stream_handle>
     {
-      typedef TunIO<ReadHandler, PacketFrom, openvpn_io::posix::stream_descriptor> Base;
+      typedef TunIO<ReadHandler, PacketFrom, openvpn_io::windows::stream_handle> Base;
 
     public:
       typedef RCPtr<Tun> Ptr;
@@ -67,7 +67,7 @@ namespace openvpn {
          const SessionStats::Ptr& stats_arg)
        : Base(read_handler_arg, frame_arg, stats_arg)
       {
-       Base::stream = new openvpn_io::posix::stream_descriptor(io_context, socket);
+       Base::stream = new openvpn_io::windows::stream_handle(io_context, reinterpret_cast<openvpn_io::windows::overlapped_handle::native_handle_type>(socket));
        Base::name_ = "tun";
        Base::retain_stream = retain_sd_arg;
        Base::tun_prefix = tun_prefix_arg;
@@ -116,7 +116,7 @@ namespace openvpn {
     class Client : public TunClient
     {
       friend class ClientConfig;  // calls constructor
-      friend class TunIO<Client*, PacketFrom, openvpn_io::posix::stream_descriptor>;  // calls tun_read_handler
+      friend class TunIO<Client*, PacketFrom, openvpn_io::windows::stream_handle>;  // calls tun_read_handler
 
       typedef Tun<Client*> TunImpl;
 
